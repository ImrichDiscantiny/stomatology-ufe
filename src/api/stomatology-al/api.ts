/* tslint:disable */
/* eslint-disable */
/**
 * Appointment List Api
 * Stomatology Appointment List management for Web-In-Cloud system
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: xdiscantiny@stuba.sk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface AppointmentDescription
 */
export interface AppointmentDescription {
    /**
     * Reason for the appointment
     * @type {string}
     * @memberof AppointmentDescription
     */
    'reasonForAppointment': string;
    /**
     * List of teeths related to the appointment
     * @type {Array<string>}
     * @memberof AppointmentDescription
     */
    'teeths': Array<string>;
}
/**
 * 
 * @export
 * @interface AppointmentListEntry
 */
export interface AppointmentListEntry {
    /**
     * Unique identifier for the appointment
     * @type {string}
     * @memberof AppointmentListEntry
     */
    'id': string;
    /**
     * Date and time of the appointment
     * @type {string}
     * @memberof AppointmentListEntry
     */
    'date': string;
    /**
     * Name of the patient
     * @type {string}
     * @memberof AppointmentListEntry
     */
    'patient': string;
    /**
     * Full name of the patient
     * @type {string}
     * @memberof AppointmentListEntry
     */
    'fullname': string;
    /**
     * Duration of the appointment in HH:mm format
     * @type {string}
     * @memberof AppointmentListEntry
     */
    'duration': string;
    /**
     * Shortcut for the day of the appointment
     * @type {string}
     * @memberof AppointmentListEntry
     */
    'dayShortcut': string;
    /**
     * 
     * @type {AppointmentDescription}
     * @memberof AppointmentListEntry
     */
    'description': AppointmentDescription;
}

/**
 * StomatologyAppointmentListApi - axios parameter creator
 * @export
 */
export const StomatologyAppointmentListApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Use this method to store new entry into the appointment list.
         * @summary Saves new entry into appointment list
         * @param {string} appointmentsDate pass the id of the particular ambulance
         * @param {AppointmentListEntry} appointmentListEntry Appointment list entry to store
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAppointmentListEntry: async (appointmentsDate: string, appointmentListEntry: AppointmentListEntry, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'appointmentsDate' is not null or undefined
            assertParamExists('createAppointmentListEntry', 'appointmentsDate', appointmentsDate)
            // verify required parameter 'appointmentListEntry' is not null or undefined
            assertParamExists('createAppointmentListEntry', 'appointmentListEntry', appointmentListEntry)
            const localVarPath = `/appointment-list/{appointmentsDate}/entries`
                .replace(`{${"appointmentsDate"}}`, encodeURIComponent(String(appointmentsDate)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(appointmentListEntry, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this method to delete the specific entry from the appointment list.
         * @summary Deletes specific appointment
         * @param {string} appointmentsDate pass the id of the particular ambulance
         * @param {string} id pass the id of the particular entry in the appointment list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAppointmentListEntry: async (appointmentsDate: string, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'appointmentsDate' is not null or undefined
            assertParamExists('deleteAppointmentListEntry', 'appointmentsDate', appointmentsDate)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteAppointmentListEntry', 'id', id)
            const localVarPath = `/appointment-list/{appointmentsDate}/entries/{id}`
                .replace(`{${"appointmentsDate"}}`, encodeURIComponent(String(appointmentsDate)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * By using appointmentsId you get list of entries in stomatology appointments list
         * @summary Provides appointments list
         * @param {string} appointmentsDate pass the id of the particular stomatology
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWaitingListEntries: async (appointmentsDate: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'appointmentsDate' is not null or undefined
            assertParamExists('getWaitingListEntries', 'appointmentsDate', appointmentsDate)
            const localVarPath = `/appointment-list/{appointmentsDate}/entries`
                .replace(`{${"appointmentsDate"}}`, encodeURIComponent(String(appointmentsDate)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this method to update content of the appointment list entry.
         * @summary Updates specific entry
         * @param {string} appointmentsDate pass the id of the particular ambulance
         * @param {string} id pass the id of the particular entry in the appointment list
         * @param {AppointmentListEntry} appointmentListEntry Appointment list entry to update
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAppointmentListEntry: async (appointmentsDate: string, id: string, appointmentListEntry: AppointmentListEntry, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'appointmentsDate' is not null or undefined
            assertParamExists('updateAppointmentListEntry', 'appointmentsDate', appointmentsDate)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateAppointmentListEntry', 'id', id)
            // verify required parameter 'appointmentListEntry' is not null or undefined
            assertParamExists('updateAppointmentListEntry', 'appointmentListEntry', appointmentListEntry)
            const localVarPath = `/appointment-list/{appointmentsDate}/entries/{id}`
                .replace(`{${"appointmentsDate"}}`, encodeURIComponent(String(appointmentsDate)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(appointmentListEntry, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * StomatologyAppointmentListApi - functional programming interface
 * @export
 */
export const StomatologyAppointmentListApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = StomatologyAppointmentListApiAxiosParamCreator(configuration)
    return {
        /**
         * Use this method to store new entry into the appointment list.
         * @summary Saves new entry into appointment list
         * @param {string} appointmentsDate pass the id of the particular ambulance
         * @param {AppointmentListEntry} appointmentListEntry Appointment list entry to store
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createAppointmentListEntry(appointmentsDate: string, appointmentListEntry: AppointmentListEntry, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppointmentListEntry>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createAppointmentListEntry(appointmentsDate, appointmentListEntry, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Use this method to delete the specific entry from the appointment list.
         * @summary Deletes specific appointment
         * @param {string} appointmentsDate pass the id of the particular ambulance
         * @param {string} id pass the id of the particular entry in the appointment list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAppointmentListEntry(appointmentsDate: string, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteAppointmentListEntry(appointmentsDate, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * By using appointmentsId you get list of entries in stomatology appointments list
         * @summary Provides appointments list
         * @param {string} appointmentsDate pass the id of the particular stomatology
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getWaitingListEntries(appointmentsDate: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AppointmentListEntry>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getWaitingListEntries(appointmentsDate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Use this method to update content of the appointment list entry.
         * @summary Updates specific entry
         * @param {string} appointmentsDate pass the id of the particular ambulance
         * @param {string} id pass the id of the particular entry in the appointment list
         * @param {AppointmentListEntry} appointmentListEntry Appointment list entry to update
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateAppointmentListEntry(appointmentsDate: string, id: string, appointmentListEntry: AppointmentListEntry, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppointmentListEntry>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateAppointmentListEntry(appointmentsDate, id, appointmentListEntry, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * StomatologyAppointmentListApi - factory interface
 * @export
 */
export const StomatologyAppointmentListApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = StomatologyAppointmentListApiFp(configuration)
    return {
        /**
         * Use this method to store new entry into the appointment list.
         * @summary Saves new entry into appointment list
         * @param {string} appointmentsDate pass the id of the particular ambulance
         * @param {AppointmentListEntry} appointmentListEntry Appointment list entry to store
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAppointmentListEntry(appointmentsDate: string, appointmentListEntry: AppointmentListEntry, options?: any): AxiosPromise<AppointmentListEntry> {
            return localVarFp.createAppointmentListEntry(appointmentsDate, appointmentListEntry, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this method to delete the specific entry from the appointment list.
         * @summary Deletes specific appointment
         * @param {string} appointmentsDate pass the id of the particular ambulance
         * @param {string} id pass the id of the particular entry in the appointment list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAppointmentListEntry(appointmentsDate: string, id: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteAppointmentListEntry(appointmentsDate, id, options).then((request) => request(axios, basePath));
        },
        /**
         * By using appointmentsId you get list of entries in stomatology appointments list
         * @summary Provides appointments list
         * @param {string} appointmentsDate pass the id of the particular stomatology
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWaitingListEntries(appointmentsDate: string, options?: any): AxiosPromise<Array<AppointmentListEntry>> {
            return localVarFp.getWaitingListEntries(appointmentsDate, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this method to update content of the appointment list entry.
         * @summary Updates specific entry
         * @param {string} appointmentsDate pass the id of the particular ambulance
         * @param {string} id pass the id of the particular entry in the appointment list
         * @param {AppointmentListEntry} appointmentListEntry Appointment list entry to update
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAppointmentListEntry(appointmentsDate: string, id: string, appointmentListEntry: AppointmentListEntry, options?: any): AxiosPromise<AppointmentListEntry> {
            return localVarFp.updateAppointmentListEntry(appointmentsDate, id, appointmentListEntry, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * StomatologyAppointmentListApi - interface
 * @export
 * @interface StomatologyAppointmentListApi
 */
export interface StomatologyAppointmentListApiInterface {
    /**
     * Use this method to store new entry into the appointment list.
     * @summary Saves new entry into appointment list
     * @param {string} appointmentsDate pass the id of the particular ambulance
     * @param {AppointmentListEntry} appointmentListEntry Appointment list entry to store
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StomatologyAppointmentListApiInterface
     */
    createAppointmentListEntry(appointmentsDate: string, appointmentListEntry: AppointmentListEntry, options?: AxiosRequestConfig): AxiosPromise<AppointmentListEntry>;

    /**
     * Use this method to delete the specific entry from the appointment list.
     * @summary Deletes specific appointment
     * @param {string} appointmentsDate pass the id of the particular ambulance
     * @param {string} id pass the id of the particular entry in the appointment list
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StomatologyAppointmentListApiInterface
     */
    deleteAppointmentListEntry(appointmentsDate: string, id: string, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * By using appointmentsId you get list of entries in stomatology appointments list
     * @summary Provides appointments list
     * @param {string} appointmentsDate pass the id of the particular stomatology
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StomatologyAppointmentListApiInterface
     */
    getWaitingListEntries(appointmentsDate: string, options?: AxiosRequestConfig): AxiosPromise<Array<AppointmentListEntry>>;

    /**
     * Use this method to update content of the appointment list entry.
     * @summary Updates specific entry
     * @param {string} appointmentsDate pass the id of the particular ambulance
     * @param {string} id pass the id of the particular entry in the appointment list
     * @param {AppointmentListEntry} appointmentListEntry Appointment list entry to update
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StomatologyAppointmentListApiInterface
     */
    updateAppointmentListEntry(appointmentsDate: string, id: string, appointmentListEntry: AppointmentListEntry, options?: AxiosRequestConfig): AxiosPromise<AppointmentListEntry>;

}

/**
 * StomatologyAppointmentListApi - object-oriented interface
 * @export
 * @class StomatologyAppointmentListApi
 * @extends {BaseAPI}
 */
export class StomatologyAppointmentListApi extends BaseAPI implements StomatologyAppointmentListApiInterface {
    /**
     * Use this method to store new entry into the appointment list.
     * @summary Saves new entry into appointment list
     * @param {string} appointmentsDate pass the id of the particular ambulance
     * @param {AppointmentListEntry} appointmentListEntry Appointment list entry to store
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StomatologyAppointmentListApi
     */
    public createAppointmentListEntry(appointmentsDate: string, appointmentListEntry: AppointmentListEntry, options?: AxiosRequestConfig) {
        return StomatologyAppointmentListApiFp(this.configuration).createAppointmentListEntry(appointmentsDate, appointmentListEntry, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this method to delete the specific entry from the appointment list.
     * @summary Deletes specific appointment
     * @param {string} appointmentsDate pass the id of the particular ambulance
     * @param {string} id pass the id of the particular entry in the appointment list
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StomatologyAppointmentListApi
     */
    public deleteAppointmentListEntry(appointmentsDate: string, id: string, options?: AxiosRequestConfig) {
        return StomatologyAppointmentListApiFp(this.configuration).deleteAppointmentListEntry(appointmentsDate, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * By using appointmentsId you get list of entries in stomatology appointments list
     * @summary Provides appointments list
     * @param {string} appointmentsDate pass the id of the particular stomatology
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StomatologyAppointmentListApi
     */
    public getWaitingListEntries(appointmentsDate: string, options?: AxiosRequestConfig) {
        return StomatologyAppointmentListApiFp(this.configuration).getWaitingListEntries(appointmentsDate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this method to update content of the appointment list entry.
     * @summary Updates specific entry
     * @param {string} appointmentsDate pass the id of the particular ambulance
     * @param {string} id pass the id of the particular entry in the appointment list
     * @param {AppointmentListEntry} appointmentListEntry Appointment list entry to update
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StomatologyAppointmentListApi
     */
    public updateAppointmentListEntry(appointmentsDate: string, id: string, appointmentListEntry: AppointmentListEntry, options?: AxiosRequestConfig) {
        return StomatologyAppointmentListApiFp(this.configuration).updateAppointmentListEntry(appointmentsDate, id, appointmentListEntry, options).then((request) => request(this.axios, this.basePath));
    }
}


