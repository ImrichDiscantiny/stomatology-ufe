/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { Appointments } from "./global/app";
export { Appointments } from "./global/app";
export namespace Components {
    interface IdAlistColumn {
        "appointmentsList": any[];
        "name": String;
        "weekDay": Date;
    }
    interface IdAppointmentBox {
        "appointment": Appointments;
        "updating": boolean;
    }
    interface IdAppointmentsList {
        "selectedDay": Date | null;
    }
    interface IdAppointmentsPage {
    }
    interface IdCalendarSearch {
    }
}
export interface IdCalendarSearchCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIdCalendarSearchElement;
}
declare global {
    interface HTMLIdAlistColumnElement extends Components.IdAlistColumn, HTMLStencilElement {
    }
    var HTMLIdAlistColumnElement: {
        prototype: HTMLIdAlistColumnElement;
        new (): HTMLIdAlistColumnElement;
    };
    interface HTMLIdAppointmentBoxElement extends Components.IdAppointmentBox, HTMLStencilElement {
    }
    var HTMLIdAppointmentBoxElement: {
        prototype: HTMLIdAppointmentBoxElement;
        new (): HTMLIdAppointmentBoxElement;
    };
    interface HTMLIdAppointmentsListElement extends Components.IdAppointmentsList, HTMLStencilElement {
    }
    var HTMLIdAppointmentsListElement: {
        prototype: HTMLIdAppointmentsListElement;
        new (): HTMLIdAppointmentsListElement;
    };
    interface HTMLIdAppointmentsPageElement extends Components.IdAppointmentsPage, HTMLStencilElement {
    }
    var HTMLIdAppointmentsPageElement: {
        prototype: HTMLIdAppointmentsPageElement;
        new (): HTMLIdAppointmentsPageElement;
    };
    interface HTMLIdCalendarSearchElementEventMap {
        "submitWeek": String;
    }
    interface HTMLIdCalendarSearchElement extends Components.IdCalendarSearch, HTMLStencilElement {
        addEventListener<K extends keyof HTMLIdCalendarSearchElementEventMap>(type: K, listener: (this: HTMLIdCalendarSearchElement, ev: IdCalendarSearchCustomEvent<HTMLIdCalendarSearchElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLIdCalendarSearchElementEventMap>(type: K, listener: (this: HTMLIdCalendarSearchElement, ev: IdCalendarSearchCustomEvent<HTMLIdCalendarSearchElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLIdCalendarSearchElement: {
        prototype: HTMLIdCalendarSearchElement;
        new (): HTMLIdCalendarSearchElement;
    };
    interface HTMLElementTagNameMap {
        "id-alist-column": HTMLIdAlistColumnElement;
        "id-appointment-box": HTMLIdAppointmentBoxElement;
        "id-appointments-list": HTMLIdAppointmentsListElement;
        "id-appointments-page": HTMLIdAppointmentsPageElement;
        "id-calendar-search": HTMLIdCalendarSearchElement;
    }
}
declare namespace LocalJSX {
    interface IdAlistColumn {
        "appointmentsList"?: any[];
        "name"?: String;
        "weekDay"?: Date;
    }
    interface IdAppointmentBox {
        "appointment"?: Appointments;
        "updating"?: boolean;
    }
    interface IdAppointmentsList {
        "selectedDay"?: Date | null;
    }
    interface IdAppointmentsPage {
    }
    interface IdCalendarSearch {
        "onSubmitWeek"?: (event: IdCalendarSearchCustomEvent<String>) => void;
    }
    interface IntrinsicElements {
        "id-alist-column": IdAlistColumn;
        "id-appointment-box": IdAppointmentBox;
        "id-appointments-list": IdAppointmentsList;
        "id-appointments-page": IdAppointmentsPage;
        "id-calendar-search": IdCalendarSearch;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "id-alist-column": LocalJSX.IdAlistColumn & JSXBase.HTMLAttributes<HTMLIdAlistColumnElement>;
            "id-appointment-box": LocalJSX.IdAppointmentBox & JSXBase.HTMLAttributes<HTMLIdAppointmentBoxElement>;
            "id-appointments-list": LocalJSX.IdAppointmentsList & JSXBase.HTMLAttributes<HTMLIdAppointmentsListElement>;
            "id-appointments-page": LocalJSX.IdAppointmentsPage & JSXBase.HTMLAttributes<HTMLIdAppointmentsPageElement>;
            "id-calendar-search": LocalJSX.IdCalendarSearch & JSXBase.HTMLAttributes<HTMLIdCalendarSearchElement>;
        }
    }
}
